#+TITLE: NLP Bahasa Indonesia dengan Python
#+AUTHOR: Kholid Fuadi, SE., MSi
#+DATE: <2016-11-17 Thu>
#+STARTUP: indent

* I. Pendahuluan
** I.1 Definisi
Menurut wikipedia, Pemrosesan Bahasa Alami (PBA) atau NLP (Natural
Language Processing), adalah cabang ilmu komputer dan linguistik yang
mengkaji interaksi antara komputer dengan bahasa (alami)
manusia.[fn:1]

Secara sederhana, saya menterjemahkan NLP sebagai disiplin ilmu yang
berusaha untuk mempelajari bahasa manusia. Seperti diketahui bahasa
manusia sangat kompleks, namun bukan berarti tidak dapat dipahami oleh
komputer sama sekali. Dengan menggunakan analisis bentuk dan pola,
mesin yang sudah terlatih dapat mengetahui apa maksud yang terkandung
dalam sebuah teks.

Inilah yang menjadi tujuan dari NLP, membuat mesin memahami maksud
dari teks yang ditulis maupun diucapkan manusia. Anda bisa bayangkan
jika mesin dapat berinteraksi dengan manusia? Ya, kurang lebih seperti
si Jarvis dalam film Iron Man. Bahasa manusia yang diterima oleh
komputer perlu diproses dahulu supaya komputer dapat memahami maksud
dari bahasa manusia. Bahasa sendiri dapat dibagi menjadi 2, *bahasa
alami*, misal bahasa indonesia, jawa, inggris dan *bahasa buatan*,
misal bahasa pemrograman komputer, bahasa pemodelan.

Sebelum sampai ke materi yang sulit, saya ingin mulai belajar NLP dari
hal-hal yang sederhana dahulu.

** I.2 Aplikasi NLP[fn:2]
- Mesin penjawab pertanyaan otomatis
- Program pengategorian dokumen otomatis
- Text mining
- Mesin translasi
- Program pembelajaran bahasa
- Spelling correction
- Plagiarism detection
- Speech recognition
- Text to speech

** I.3 Kendala NLP
- Bahasa = kata + aturan + pengecualian
- Bahasa alami mengandung ambiguitas
- Bahasa manusia tidak hanya satu
- Bahasa manusia terus berubah, misalnya fenomena kemunculan bahasa
  alay.

** I.4 Istilah-istilah dalam NLP
Sebagai seorang awam dalam dunia linguistik, bagi saya penting untuk
mengetahui istilah-istilah yang sering digunakan dalam NLP.
*** a. /tokenizing/
Proses memecah kata atau kalimat, kalau kata berdasar spasi, kalau
kalimat berdasar tanda baca titik. Teknik yang digunakan bisa
menggunakan ~regex~ atau menggunakan fungsi dari pustaka
~nltk~. Berikut ini contoh kode:

#+BEGIN_SRC python
  from nltk.tokenize import sent_tokenize, word_tokenize

  text = "Selamat pagi Pak Ahok, bagaimana kabarnya? Semoga sehat selalu."

  print sent_tokenize(text)
  print word_tokenize(text)
#+END_SRC

Hasilnya:

#+BEGIN_SRC python
  ['Selamat pagi Mr. Ahok, bagaimana kabarnya?', 'Semoga sehat selalu.']
  ['Selamat', 'pagi', 'Mr.', 'Ahok', ',', 'bagaimana', 'kabarnya', '?',
  'Semoga', 'sehat', 'selalu', '.']
#+END_SRC

Beruntung, karena karakter huruf Bahasa Indonesia sama dengan Bahasa
Inggris, fungsi ini dapat kita gunakan untuk Bahasa Indonesia
juga. Terlihat bahwa pustaka ~nltk~ sudah menyediakan fungsi yang
/reliable/ untuk memecah kalimat atau kata dengan benar.

*** b. /corpus/ atau /corpora/ (jamak)
Naskah teks, misal naskah pidato presiden, jurnal ekonomi. Sejenis
~bank bahasa~ yang berasal dari penggunaan bahasa dalam berbagai
/genre/, ragam dan bahasa lisan maupun tertulis yang menjamin
keragaman yang seluas-luasnya dan menghindari bahasa yang sangat
sempit.

Korpus dapat membantu dalam penentuan kelas kata sebuah lema karena
korpus memberikan konteks yang berbeda-beda sesuai tempat kata itu
berada. Contohnya, kata /salut/ dalam KBBI Edisi IV (2008: 1211) hanya
memiliki satu kelas kata, yakni ~nomina~. Namun ketika kata /salut/
diekstrak dari korpus, didapati bahwa ternyata kata salut juga dapat
memiliki kelas adjektif, seperti terlihat pada kalimat 56279, 19125,
dan 4172 dalam gambar berikut.[fn:5]

#+CAPTION: Penggunaan kata /salut/ dalam korpus
#+NAME: Analisis kata /salut/ dalam korpus
[[./assets/images/korpus_sketch_engine.png]]

Korpus membantu pekamus dalam mendefinisikan suatu lema. Proses
pendefinisian biasanya memerlukan beberapa tahap analisis sehingga
dapat dihasilkan definisi yang baik dan tepat.
*** c. /lexicon/
Kata dan artinya (mirip kamus). Contoh, kata 'tahu' bisa bermakna
makanan atau bisa juga paham. Kalau dalam bahasa Inggris, kata _bull_
bagi investor berbeda makna dengan _bull_ bagi pembicara biasa.
*** d. /stop words/
Kata penghubung kalau dalam bahasa Indonesia. Kalau dalam bahasa
Inggris, pustaka ~nltk~ sudah menyediakan daftar /stopwords/ yang
tinggal diunduh, lain halnya dengan Bahasa Indonesia. Kita harus
menambahkan secara manual, beruntung ada beberapa tautan di Internet
yang menyediakan, dan sudah saya unduh di direktori
~dataset~[fn:4]. Mari kita coba terapkan untuk mengidentifikasi kata
penghubung dalam Bahasa Indonesia:

#+BEGIN_SRC python
import os


stopword_file = os.path.join('.', 'dataset/stopword_list_indo.txt')

with open(stopword_file, 'r') as f:
    stopwords = f.read()

stopwords = [i for i in stopwords.split('\n')]
return stopwords[:5]
#+END_SRC

#+RESULTS:
| ada | adalah | adanya | adapun | agak | 

Sekarang mari gunakan untuk mengidentifikasi kata penghubung dalam
kalimat berikut:

#+BEGIN_SRC python
import os
from nltk.tokenize import word_tokenize


# reading stopword_list_indo.txt
stopword_file = os.path.abspath(os.path.join('.',
                                             'dataset/stopword_list_indo.txt'))
with open(stopword_file, 'r') as f:
    stopwords = f.read()

stopwords = [i for i in stopwords.split('\n')]

teks = "Semenjak dihadang warga ketika kampanye, Ahok sekarang sering \
melakukan kegiatan kampanye di poskonya."

words = word_tokenize(teks)

filtered_sentence = [w for w in words if not w in stopwords]
print filtered_sentence
#+END_SRC

Hasilnya:

#+BEGIN_SRC python
['Semenjak', 'dihadang', 'warga', 'kampanye', ',', 'Ahok', 'kegiatan',
'kampanye', 'poskonya', '.']
#+END_SRC

Terlihat bahwa kata ~sekarang~, ~ketika~, ~sering~, ~melakukan~ dan
~di~ dianggap sebagai kata penghubung sehingga dihilangkan dari
~teks~. Inilah salah satu contoh proses /tokenization/ dan
membersihkan teks dari kata penghubung.

*** e. /stemming/
Mengubah kata ke bentuk aslinya, tanpa memperhatikan konteks. Beberapa
jenis stemming Bahasa Indonesia yang ada mulai dari Nazief adriani,
Arifin-setiono, Tala, hingga Sembok. Stemming yang populer digunakan
yaitu *Nazief Adriani (NA)* karena akurasi yang dihasilkan dapat
dikatakan cukup tinggi hingga mencapai 94%.

Contoh:

#+BEGIN_SRC text
  Se + bungkus = sebungkus
  Me + inap = menginap
  Me + pesona = mempesona
  Me + sapu = menyapu
  Pe + sabar = penyabar
#+END_SRC

Pustaka python untuk proses stemming bahasa Indonesia bernama
[[https://github.com/har07/PySastrawi][Sastrawi]], dapat di-install dengan mudah via ~pip install Sastrawi~.

Berikut ini contoh kode proses stemming sederhana:

#+BEGIN_SRC python

# import StemmerFactory class
from Sastrawi.Stemmer.StemmerFactory import StemmerFactory

# create stemmer
factory = StemmerFactory()
stemmer = factory.create_stemmer()

# stemming process
sentence = 'Perekonomian Indonesia sedang dalam pertumbuhan yang membanggakan'
output   = stemmer.stem(sentence)

print output
# ekonomi indonesia sedang dalam tumbuh yang bangga

print stemmer.stem('Mereka meniru-nirukannya')
# mereka tiru
#+END_SRC

Referensi menarik di tema ini:
- [[https://liyantanto.wordpress.com/2011/06/28/stemming-bahasa-indonesia-dengan-algoritma-nazief-dan-andriani/][Stemming bahasa indonesia dengan algoritma nazief dan andriani]]
- [[http://sastrawi.github.io/][sastrawi - library untuk stemming]]
- [[https://yudiagusta.files.wordpress.com/2009/11/196-201-knsi09-036-perbandingan-algoritma-stemming-porter-dengan-algoritma-nazief-adriani-untuk-stemming-dokumen-teks-bahasa-indonesia.pdf][Perbandingan
  algoritma stemming Porter dengan algoritma Nazief Adriani untuk
  stemming dokumen teks bahasa Indonesia]]
*** f. /lemmatization/
Mengubah kata ke bentuk asalnya, dengan memperhatikan konteks.
*** g. /treebank/
*** h. /pos tag/
Memberikan label pada kata sesuai dengan aturan /grammar/.

Contoh:
#+BEGIN_SRC text
  kata:
  ['meja'], ['hitam']

  POS Tag Processing result:
  [('meja', 'Verba'),('hitam', 'Verba')]
#+END_SRC
*** i. /spell checking/
Koreksi kata agar sesuai dengan aturan masing-masing bahasa alami.

Contoh:
#+BEGIN_SRC text
  ['syskkmu'] => ['saya suka kami'],
  ['memeroleh'] => ['memperoleh']
#+END_SRC
*** j. /concordance/
Daftar kemunculan kata dan konteksnya, sebagaimana yang terdapat dalam
korpus, biasanya dalam bentuk /KWIC Index/. Gambar dalam sub-bagian
/corpus/ di atas merupakah salah satu contohnya.

#+BEGIN_SRC python
  import os
  import nltk
  from nltk.corpus import PlaintextCorpusReader


  corpus_loc = os.path.join(os.path.abspath('.'), 'corpus')
  # files = ".*\.txt"
  files = "ahok.txt"
  read_corpus = PlaintextCorpusReader(corpus_loc, files)
  corpus = nltk.Text(read_corpus.words())
  test = nltk.TextCollection(corpus_loc)

  corpus.concordance("bus")
#+END_SRC

* II. Rumusan Masalah
** Batasan Masalah
Batasan rumusan masalah disini adalah dalam konteks bahasa Indonesia,
karena memang belum banyak penelitian maupun /dataset/ dalam bahasa
Indonesia
** Tujuan
Tujuan dari /paper/ ini adalah membuat aplikasi analisis sentimen
sederhana menggunakan bahasa pemrograman Python.
* III. Metode
** III.1 Sumber Data (Domain):
- Koran
- Teks legal
- Novel
- E-mail
- SMS
- Customer Review
- Blog post
- Twitter
- Kaskus
- Facebook
- etc.
* IV. Analisis
** IV.1 Analisis Sentimen
Apakah teks bermakna *positif*, *negatif* atau *netral*? Sumber teks
bisa dari kalimat, tweet, pesan SMS, review konsumen, dokumen, dan
seterusnya.
Contoh penerapan di dunia nyata:
- Bagaimana sentimen terhadap sebuah aspek dari produk?
- Bagaimana sentimen terhadap politisi, kebijakan pemerintah,
  perusahaan atau produk?
*** Message level sentiment
- Positive
- Negative
- Neutral
- Indeterminate
- Both positive and negative
** IV.2 Analisis Emosi[fn:3]
Apa emosi yang terkandung dalam sebuah teks? *Senang*, *susah*,
*ketakutan*, *marah*?
* V. Kesimpulan
* Good Resources
Berikut ini beberapa sumber bacaan yang saya temukan ketika sedang
belajar tentang NLP.
** PBA/NLP in General
- [[https://github.com/sastrawi/nlp-bahasa-indonesia][Kumpulan thesis, paper dan artikel tentang NLP Bahasa Indonesia]] [Github]
- [[http://language.worldofcomputing.net/nlp-glossary/glossary-of-nlp-terms.html][Glossary of NLP Terms]] [Blog/Website]
- [[http://bahasa.cs.ui.ac.id/about.php][Pusat Bahasa UI]] [Blog/Website]
- [[https://arxiv.org/pdf/1103.0398v1.pdf][Natural Language Processing (almost) from Scratch]] [PDF]
- [[http:https://www.youtube.com/results?search_query=pemrosesan+bahasa+alami][Youtube search result for PBA]] [Youtube]
- [[https://beritati.blogspot.co.id/2015/04/pemrosesan-bahasa-alami-natural.html][Pemrosesan Bahasa Alami - Seri Text Mining dan Web Mining (2)]]
  [Blog/Website]
- [[http://blog.pantaw.com/nlp-pemrosesan-bahasa-alami/][Pemrosesan Bahasa Alami]] [Blog/Website]
- [[http://kbbi.web.id/][KBBI]] [Blog/Website]
** Analisis Sentimen
- [[https://www.youtube.com/watch?v=zv16Xyph7Ss][Sentiment Analysis of Social Media Texts Part 1]] [PDF]
** Stemming
- [[https://liyantanto.wordpress.com/2011/06/28/stemming-bahasa-indonesia-dengan-algoritma-nazief-dan-andriani/][Stemming Bahasa Indonesia dengan Algoritma Nazief dan Andriani]]
  [Blog/Website]
- [[http://sastrawi.github.io/][Sastrawi - Library untuk Stemming Bahasa Indonesia]] [Github]
- [[https://yudiagusta.files.wordpress.com/2009/11/196-201-knsi09-036-perbandingan-algoritma-stemming-porter-dengan-algoritma-nazief-adriani-untuk-stemming-dokumen-teks-bahasa-indonesia.pdf][Perbandingan
  Algoritma Stemming Porter dengan Algoritma Nazief Adriani untuk
  Stemming Dokumen Teks Bahasa Indonesia]] [PDF]
  
** Korpus
- [[http://badanbahasa.kemdikbud.go.id/lamanbahasa/artikel/1580][Korpus dan Penyusunan Kamus - Badan Bahasa Kemdikbud]]
* Footnotes

[fn:4] [[http://hikaruyuuki.lecture.ub.ac.id/kamus-kata-dasar-dan-stopword-list-bahasa-indonesia/][Kamus kata dasar dan stopword list bahasa indonesia]]

[fn:1] [[https://id.wikipedia.org/wiki/Pemrosesan_bahasa_alami][Pemrosesan Bahasa Alami {wikipedia}]]

[fn:2] https://youtu.be/nSzrOl_vnn4?t=61

[fn:3] https://youtu.be/zv16Xyph7Ss?t=176

[fn:5] http://badanbahasa.kemdikbud.go.id/lamanbahasa/artikel/1580
