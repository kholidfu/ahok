#+TITLE: NLP Bahasa Indonesia dengan Python
#+AUTHOR: Kholid Fuadi, SE., MSi
#+DATE: <2016-11-17 Thu>
#+STARTUP: indent

* I. Pendahuluan
** I.1 Definisi
Menurut wikipedia, Pemrosesan Bahasa Alami (PBA) atau NLP (Natural
Language Processing), adalah cabang ilmu komputer dan linguistik yang
mengkaji interaksi antara komputer dengan bahasa (alami)
manusia.[fn:1]

Secara sederhana, saya menterjemahkan NLP sebagai disiplin ilmu yang
berusaha untuk mempelajari bahasa manusia. Seperti diketahui bahasa
manusia sangat kompleks, namun bukan berarti tidak dapat dipahami oleh
komputer sama sekali. Dengan menggunakan analisis bentuk dan pola,
mesin yang sudah terlatih dapat mengetahui apa maksud yang terkandung
dalam sebuah teks.

Inilah yang menjadi tujuan dari NLP, membuat mesin memahami maksud
dari teks yang ditulis maupun diucapkan manusia. Anda bisa bayangkan
jika mesin dapat berinteraksi dengan manusia? Ya, kurang lebih seperti
si Jarvis dalam film Iron Man. Bahasa manusia yang diterima oleh
komputer perlu diproses dahulu supaya komputer dapat memahami maksud
dari bahasa manusia. Bahasa sendiri dapat dibagi menjadi 2, *bahasa
alami*, misal bahasa indonesia, jawa, inggris dan *bahasa buatan*,
misal bahasa pemrograman komputer, bahasa pemodelan.

Sebelum sampai ke materi yang sulit, saya ingin mulai belajar NLP dari
hal-hal yang sederhana dahulu.

** I.2 Aplikasi NLP[fn:2]
- Mesin penjawab pertanyaan otomatis
- Program pengategorian dokumen otomatis
- Text mining
- Mesin translasi
- Program pembelajaran bahasa
- Spelling correction
- Plagiarism detection
- Speech recognition
- Text to speech

** I.3 Kendala NLP
- Bahasa = kata + aturan + pengecualian
- Bahasa alami mengandung ambiguitas
- Bahasa manusia tidak hanya satu
- Bahasa manusia terus berubah, misalnya fenomena kemunculan bahasa
  alay.

** I.4 Istilah-istilah dalam NLP
Sebagai seorang awam dalam dunia linguistik, bagi saya penting untuk
mengetahui istilah-istilah yang sering digunakan dalam NLP.
*** I.4.1 /tokenizing/
Proses memecah kata atau kalimat, kalau kata berdasar spasi, kalau
kalimat berdasar tanda baca titik. Teknik yang digunakan bisa
menggunakan ~regex~ atau menggunakan fungsi dari pustaka
~nltk~. Berikut ini contoh kode:

#+BEGIN_SRC python
  from nltk.tokenize import sent_tokenize, word_tokenize

  text = "Selamat pagi Pak Ahok, bagaimana kabarnya? Semoga sehat selalu."

  print sent_tokenize(text)
  print word_tokenize(text)
#+END_SRC

Hasilnya:

#+BEGIN_SRC python
  ['Selamat pagi Mr. Ahok, bagaimana kabarnya?', 'Semoga sehat selalu.']
  ['Selamat', 'pagi', 'Mr.', 'Ahok', ',', 'bagaimana', 'kabarnya', '?',
  'Semoga', 'sehat', 'selalu', '.']
#+END_SRC

Beruntung, karena karakter huruf Bahasa Indonesia sama dengan Bahasa
Inggris, fungsi ini dapat kita gunakan untuk Bahasa Indonesia
juga. Terlihat bahwa pustaka ~nltk~ sudah menyediakan fungsi yang
/reliable/ untuk memecah kalimat atau kata dengan benar.

*** I.4.2 /corpora/
NaskI.4ah teks, misal naskah pidato presiden, jurnal ekonomi.
*** I.4.3 /lexicon/
KataI.4 dan artinya (mirip kamus). Contoh, kata 'tahu' bisa bermakna
makaI.4nan atau bisa juga paham. Kalau dalam bahasa Inggris, kata _bull_
bagiI.4 investor berbeda makna dengan _bull_ bagi pembicara biasa.
*** I.4.4 /stop words/
KataI.4 penghubung kalau dalam bahasa Indonesia. Kalau dalam bahasa
InggI.4ris, pustaka ~nltk~ sudah menyediakan daftar /stopwords/ yang
tingI.4gal diunduh, lain halnya dengan Bahasa Indonesia. Kita harus
menaI.4mbahkan secara manual, beruntung ada beberapa tautan di Internet
yangI.4 menyediakan, dan sudah saya unduh di direktori
~datI.4aset~[fn:4]. Mari kita coba terapkan untuk mengidentifikasi kata
pengI.4hubung dalam Bahasa Indonesia:
    I.4
#+BEI.4GIN_SRC python
impoI.4rt os
    I.4
    I.4
stopI.4word_file = os.path.join('.', 'dataset/stopword_list_indo.txt')
    I.4
withI.4 open(stopword_file, 'r') as f:
    I.4stopwords = f.read()
    I.4
stopI.4words = [i for i in stopwords.split('\n')]
retuI.4rn stopwords[:5]
#+ENI.4D_SRC
    I.4
#+REI.4SULTS:
| adI.4a | adalah | adanya | adapun | agak | 
    I.4
SekaI.4rang mari gunakan untuk mengidentifikasi kata penghubung dalam
kaliI.4mat berikut:
    I.4
#+BEI.4GIN_SRC python
impoI.4rt os
fromI.4 nltk.tokenize import word_tokenize
    I.4
    I.4
# reI.4ading stopword_list_indo.txt
stopI.4word_file = os.path.abspath(os.path.join('.',
    I.4                                         'dataset/stopword_list_indo.txt'))
withI.4 open(stopword_file, 'r') as f:
    I.4stopwords = f.read()
    I.4
stopI.4words = [i for i in stopwords.split('\n')]
    I.4
teksI.4 = "Semenjak dihadang warga ketika kampanye, Ahok sekarang sering \
melaI.4kukan kegiatan kampanye di poskonya."
    I.4
wordI.4s = word_tokenize(teks)
    I.4
filtI.4ered_sentence = [w for w in words if not w in stopwords]
prinI.4t filtered_sentence
#+ENI.4D_SRC
    I.4
HasiI.4lnya:
    I.4
#+BEI.4GIN_SRC python
['SeI.4menjak', 'dihadang', 'warga', 'kampanye', ',', 'Ahok', 'kegiatan',
'kamI.4panye', 'poskonya', '.']
#+ENI.4D_SRC
    I.4
TerlI.4ihat bahwa kata ~sekarang~, ~ketika~, ~sering~, ~melakukan~ dan
~di~I.4 dianggap sebagai kata penghubung sehingga dihilangkan dari
~tekI.4s~. Inilah salah satu contoh proses /tokenization/ dan
membI.4ersihkan teks dari kata penghubung.
    I.4
*** I.4.5 /stemming/
MengI.4ubah kata ke bentuk aslinya, tanpa memperhatikan konteks. Beberapa
jeniI.4s stemming Bahasa Indonesia yang ada mulai dari Nazief adriani,
ArifI.4in-setiono, Tala, hingga Sembok. Stemming yang populer digunakan
yaitI.4u *Nazief Adriani (NA)* karena akurasi yang dihasilkan dapat
dikaI.4takan cukup tinggi hingga mencapai 94%.
    I.4
RefeI.4rensi menarik di tema ini:
- [[I.4https://liyantanto.wordpress.com/2011/06/28/stemming-bahasa-indonesia-dengan-algoritma-nazief-dan-andriani/][Stemming bahasa indonesia dengan algoritma nazief dan andriani]]
- [[I.4http://sastrawi.github.io/][sastrawi - library untuk stemming]]
- [[I.4https://yudiagusta.files.wordpress.com/2009/11/196-201-knsi09-036-perbandingan-algoritma-stemming-porter-dengan-algoritma-nazief-adriani-untuk-stemming-dokumen-teks-bahasa-indonesia.pdf][Perbandingan algoritma stemming Porter dengan algoritma Nazief
  AdI.4riani untuk stemming dokumen teks bahasa Indonesia]]
*** I.4.6 /lemmatization/
MengI.4ubah kata ke bentuk asalnya, dengan memperhatikan konteks.
*** I.4.7 /treebank/
*** I.4.8 /pos tag/
* II. Rumusan Masalah
** Batasan Masalah
Batasan rumusan masalah disini adalah dalam konteks bahasa Indonesia,
karena memang belum banyak penelitian maupun /dataset/ dalam bahasa
Indonesia
** Tujuan
Tujuan dari /paper/ ini adalah membuat aplikasi analisis sentimen
sederhana menggunakan bahasa pemrograman Python.
* III. Metode
** III.1 Sumber Data (Domain):
- Koran
- Teks legal
- Novel
- E-mail
- SMS
- Customer Review
- Blog post
- Twitter
- Kaskus
- Facebook
- etc.
* IV. Analisis
** IV.1 Analisis Sentimen
Apakah teks bermakna *positif*, *negatif* atau *netral*? Sumber teks
bisa dari kalimat, tweet, pesan SMS, review konsumen, dokumen, dan
seterusnya.
Contoh penerapan di dunia nyata:
- Bagaimana sentimen terhadap sebuah aspek dari produk?
- Bagaimana sentimen terhadap politisi, kebijakan pemerintah,
  perusahaan atau produk?
*** Message level sentiment
- Positive
- Negative
- Neutral
- Indeterminate
- Both positive and negative
** IV.2 Analisis Emosi[fn:3]
Apa emosi yang terkandung dalam sebuah teks? *Senang*, *susah*,
*ketakutan*, *marah*?
* V. Kesimpulan
* Daftar Pustaka
- [ ] Pusat Bahasa UI, http://bahasa.cs.ui.ac.id/about.php
- [ ] Natural Language Processing (almost) from Scratch,
  https://arxiv.org/pdf/1103.0398v1.pdf
- [ ] Kumpulan video PBA di youtube,
  https://www.youtube.com/results?search_query=pemrosesan+bahasa+alami
- [ ] Sentiment Analysis of Social Media Texts Part 1,
  https://www.youtube.com/watch?v=zv16Xyph7Ss
* Footnotes

[fn:4] [[http://hikaruyuuki.lecture.ub.ac.id/kamus-kata-dasar-dan-stopword-list-bahasa-indonesia/][Kamus kata dasar dan stopword list bahasa indonesia]]

[fn:1] [[https://id.wikipedia.org/wiki/Pemrosesan_bahasa_alami][Pemrosesan Bahasa Alami {wikipedia}]]

[fn:2] https://youtu.be/nSzrOl_vnn4?t=61

[fn:3] https://youtu.be/zv16Xyph7Ss?t=176
